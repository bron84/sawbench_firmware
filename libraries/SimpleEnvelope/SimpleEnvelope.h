#ifndef SIMPLEENVELOPE_LIB_H
#define SIMPLEENVELOPE_LIB_H

#include <stdint.h>

//--
// envelope generation, including adsr and such
//--

// todo: program memory
static const uint16_t stepLut[128] =
{
// FW1.1 : for 8+11 bit precision
// 0xFFFF,
// 0xDEE4,
// 0xC341,
// 0xAC01,
// 0x984E,
// 0x8780,
// 0x7915,
// 0x6CA3,
// 0x61D8,
// 0x586F,
// 0x5031,
// 0x48F1,
// 0x428A,
// 0x3CDE,
// 0x37D2,
// 0x3351,
// 0x2F49,
// 0x2BAA,
// 0x2868,
// 0x2576,
// 0x22CC,
// 0x2061,
// 0x1E2F,
// 0x1C2E,
// 0x1A59,
// 0x18AC,
// 0x1723,
// 0x15B9,
// 0x146D,
// 0x133A,
// 0x121F,
// 0x111A,
// 0x1027,
// 0x0F47,
// 0x0E76,
// 0x0DB3,
// 0x0CFF,
// 0x0C56,
// 0x0BB9,
// 0x0B25,
// 0x0A9C,
// 0x0A1B,
// 0x09A2,
// 0x0930,
// 0x08C6,
// 0x0861,
// 0x0803,
// 0x07AA,
// 0x0756,
// 0x0707,
// 0x06BC,
// 0x0676,
// 0x0633,
// 0x05F3,
// 0x05B7,
// 0x057E,
// 0x0549,
// 0x0515,
// 0x04E5,
// 0x04B6,
// 0x048A,
// 0x0460,
// 0x0438,
// 0x0412,
// 0x03EE,
// 0x03CB,
// 0x03AA,
// 0x038B,
// 0x036D,
// 0x0350,
// 0x0334,
// 0x031A,
// 0x0301,
// 0x02E8,
// 0x02D1,
// 0x02BB,
// 0x02A5,
// 0x0291,
// 0x027D,
// 0x026A,
// 0x0258,
// 0x0247,
// 0x0236,
// 0x0226,
// 0x0216,
// 0x0207,
// 0x01F9,
// 0x01EB,
// 0x01DE,
// 0x01D1,
// 0x01C4,
// 0x01B8,
// 0x01AD,
// 0x01A2,
// 0x0197,
// 0x018C,
// 0x0182,
// 0x0179,
// 0x016F,
// 0x0166,
// 0x015D,
// 0x0155,
// 0x014D,
// 0x0145,
// 0x013D,
// 0x0135,
// 0x012E,
// 0x0127,
// 0x0120,
// 0x011A,
// 0x0113,
// 0x010D,
// 0x0107,
// 0x0101,
// 0x00FC,
// 0x00F6,
// 0x00F1,
// 0x00EC,
// 0x00E7,
// 0x00E2,
// 0x00DD,
// 0x00D8,
// 0x00D4,
// 0x00CF,
// 0x00CB,
// 0x00C7,
// 0x00C3,
// 0x00BF
// FW1.2 : for 9 bit precision
0xFFFF,
0xCB6F,
0xA455,
0x86A4,
0x6FB1,
0x5DAD,
0x4F56,
0x43C7,
0x3A5D,
0x329D,
0x2C2D,
0x26C9,
0x223D,
0x1E60,
0x1B12,
0x183B,
0x15C6,
0x13A3,
0x11C6,
0x1023,
0x0EB2,
0x0D6B,
0x0C4A,
0x0B48,
0x0A61,
0x0993,
0x08D9,
0x0831,
0x079A,
0x0711,
0x0694,
0x0623,
0x05BC,
0x055D,
0x0506,
0x04B7,
0x046E,
0x042B,
0x03ED,
0x03B3,
0x037E,
0x034D,
0x0320,
0x02F5,
0x02CE,
0x02A9,
0x0287,
0x0267,
0x0249,
0x022D,
0x0212,
0x01FA,
0x01E3,
0x01CD,
0x01B8,
0x01A5,
0x0193,
0x0182,
0x0172,
0x0162,
0x0154,
0x0146,
0x0139,
0x012D,
0x0121,
0x0116,
0x010C,
0x0102,
0x00F8,
0x00EF,
0x00E7,
0x00DF,
0x00D7,
0x00CF,
0x00C8,
0x00C1,
0x00BB,
0x00B5,
0x00AF,
0x00A9,
0x00A4,
0x009F,
0x009A,
0x0095,
0x0090,
0x008C,
0x0088,
0x0084,
0x0080,
0x007C,
0x0078,
0x0075,
0x0072,
0x006E,
0x006B,
0x0068,
0x0065,
0x0063,
0x0060,
0x005E,
0x005B,
0x0059,
0x0056,
0x0054,
0x0052,
0x0050,
0x004E,
0x004C,
0x004A,
0x0048,
0x0047,
0x0045,
0x0043,
0x0042,
0x0040,
0x003F,
0x003D,
0x003C,
0x003A,
0x0039,
0x0038,
0x0037,
0x0035,
0x0034,
0x0033,
0x0032,
0x0031,
0x0030
};

class SimpleEnvelope
{
public:
	static const int precision = 9; // 11; // bits behind the comma

	SimpleEnvelope();
	~SimpleEnvelope();
	void run();
	void runExponential();
	void setRelease(uint8_t release);
	void setAttack(uint8_t attack);
	void setDecay(uint8_t decay);
	void setSustainLevel(uint8_t sustain);
	void trigger();
	void stop();
	void setLooping(bool mode);
	void switchExpMode();
	inline uint16_t getStep(uint8_t i)
	{
	  return stepLut[i];
	}

	bool loopMode, expMode;
	uint16_t itersDone;
	int32_t output, expPos;
	int32_t sustainLevel;
	uint16_t attackStep;
	uint16_t decayStep;
	uint16_t releaseStep;

protected:

	enum AdsrStateType 
	{
	  ADSR_STATE_ATTACK, ADSR_STATE_DECAY, ADSR_STATE_SUSTAIN, ADSR_STATE_RELEASE, ADSR_STATE_DONE
	};

	AdsrStateType adsrState;

}; // class SimpleEnvelope

#endif //SIMPLEENVELOPE_LIB_H
